generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String              @id @default(cuid())
  email                      String              @unique
  name                       String?
  firstName                  String?
  lastName                   String?
  role                       Role                @default(USER)
  password                   String?
  profileImage               String?
  isActive                   Boolean             @default(true)
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  accounts                   Account[]
  contentItems               ContentItem[]
  uploadedFiles              MediaFile[]         @relation("MediaFileUploader")
  approvedMembershipRequests MembershipRequest[] @relation("MembershipRequestApprover")
  reviewedMembershipRequests MembershipRequest[] @relation("MembershipRequestReviewer")
  statusHistoryChanges       MembershipRequestStatusHistory[]
  sessions                   Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ContentItem {
  id           String                @id @default(cuid())
  slug         String                @unique
  type         ContentType           @default(PAGE)
  status       Status                @default(DRAFT)
  featuredImg  String?
  authorId     String
  publishedAt  DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  categories   ContentItemCategory[]
  tags         ContentItemTag[]
  author       User                  @relation(fields: [authorId], references: [id])
  translations ContentTranslation[]

  @@map("content_items")
}

model ContentTranslation {
  id              String      @id @default(cuid())
  contentItemId   String
  language        String
  title           String
  content         String
  excerpt         String
  seoTitle        String?
  metaDescription String?
  contentItem     ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@unique([contentItemId, language])
  @@map("content_translations")
}

model Category {
  id           String                @id @default(cuid())
  slug         String                @unique
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  parentId     String?
  type         String                @default("general")
  parent       Category?             @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]            @relation("CategoryHierarchy")
  translations CategoryTranslation[]
  contentItems ContentItemCategory[]

  @@map("categories")
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  language    String
  name        String
  description String?
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
  @@map("category_translations")
}

model ContentItemCategory {
  contentItemId String
  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@id([contentItemId, categoryId])
  @@map("content_item_categories")
}

model Tag {
  id           String           @id @default(cuid())
  slug         String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  contentItems ContentItemTag[]
  translations TagTranslation[]

  @@map("tags")
}

model TagTranslation {
  id       String @id @default(cuid())
  tagId    String
  language String
  name     String
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, language])
  @@map("tag_translations")
}

model ContentItemTag {
  contentItemId String
  tagId         String
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentItemId, tagId])
  @@map("content_item_tags")
}

model MediaFile {
  id           String   @id @default(cuid())
  filename     String   @unique
  originalName String
  url          String
  altText      String?
  caption      String?
  mimeType     String
  fileSize     Int?
  category     String   @default("images")
  uploaderId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploader     User?    @relation("MediaFileUploader", fields: [uploaderId], references: [id])

  @@map("media_files")
}

model Service {
  id           String               @id @default(cuid())
  slug         String               @unique
  icon         String?
  order        Int                  @default(0)
  active       Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  colorTheme   String?              @default("navy")
  featuredImg  String?
  translations ServiceTranslation[]

  @@map("services")
}

model ServiceTranslation {
  id          String  @id @default(cuid())
  serviceId   String
  language    String
  title       String
  description String
  buttonText  String  @default("Learn More")
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, language])
  @@map("service_translations")
}

model Member {
  id                 String              @id @default(cuid())
  memberNumber       String              @unique
  firstName          String
  lastName           String
  firstNameKhmer     String?
  lastNameKhmer      String?
  email              String              @unique
  phone              String?
  address            String?
  city               String?
  postalCode         String?
  country            String?             @default("Sweden")
  membershipType     MembershipType      @default(REGULAR)
  residenceStatus    ResidenceStatus?
  joinedAt           DateTime            @default(now())
  active             Boolean             @default(true)
  profileImage       String?
  bio                String?
  skills             String[]
  interests          String[]
  emergencyContact   String?
  emergencyPhone     String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  membershipRequests MembershipRequest[]

  @@map("members")
}

model MembershipRequest {
  id                  String           @id @default(cuid())
  requestNumber       String           @unique
  firstName           String
  lastName            String
  firstNameKhmer      String?
  lastNameKhmer       String?
  dateOfBirth         DateTime?
  email               String
  phone               String?
  address             String?
  city                String?
  postalCode          String?
  country             String           @default("Sweden")
  residenceStatus     ResidenceStatus?
  residenceSince      DateTime?
  motivation          String
  hearAboutUs         String?
  interests           String?
  skills              String?
  requestedMemberType MembershipType   @default(REGULAR)
  status              RequestStatus    @default(PENDING)
  submittedAt         DateTime         @default(now())
  reviewedBy          String?
  reviewedAt          DateTime?
  reviewNotes         String?
  approvedBy          String?
  approvedAt          DateTime?
  createdMemberId     String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  adminNotes          String?
  rejectionReason     String?
  approver            User?            @relation("MembershipRequestApprover", fields: [approvedBy], references: [id])
  createdMember       Member?          @relation(fields: [createdMemberId], references: [id])
  reviewer            User?            @relation("MembershipRequestReviewer", fields: [reviewedBy], references: [id])
  statusHistory       MembershipRequestStatusHistory[]

  @@map("membership_requests")
}

model MembershipRequestStatusHistory {
  id                    String           @id @default(cuid())
  membershipRequestId   String
  fromStatus            RequestStatus?
  toStatus              RequestStatus
  changedBy             String?
  changedAt             DateTime         @default(now())
  notes                 String?
  membershipRequest     MembershipRequest @relation(fields: [membershipRequestId], references: [id], onDelete: Cascade)
  changedByUser         User?            @relation(fields: [changedBy], references: [id])

  @@map("membership_request_status_history")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum ContentType {
  PAGE
  POST
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MembershipType {
  REGULAR
  STUDENT
  FAMILY
  BOARD
  VOLUNTEER
  HONORARY
  LIFETIME
}

enum ResidenceStatus {
  CITIZEN
  PERMANENT_RESIDENT
  EU_CITIZEN
  STUDENT
  WORK_PERMIT
  ASYLUM_SEEKER
  OTHER
}

enum RequestStatus {
  PENDING
  UNDER_REVIEW
  ADDITIONAL_INFO_REQUESTED
  APPROVED
  REJECTED
}
