// This is your Prisma schema file for production,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Enable binary targets for Vercel deployment
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  password  String?  // For email/password auth
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentItems ContentItem[]
  accounts     Account[]
  sessions     Session[]
  uploadedFiles MediaFile[] @relation("MediaFileUploader")
  reviewedMembershipRequests MembershipRequest[] @relation("MembershipRequestReviewer")

  @@map("users")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Content Management models
model ContentItem {
  id          String      @id @default(cuid())
  slug        String      @unique
  type        ContentType @default(PAGE)
  status      Status      @default(DRAFT)
  featuredImg String?
  authorId    String
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author       User                    @relation(fields: [authorId], references: [id])
  translations ContentTranslation[]
  categories   ContentItemCategory[]
  tags         ContentItemTag[]

  @@map("content_items")
}

model ContentTranslation {
  id              String @id @default(cuid())
  contentItemId   String
  language        String
  title           String
  content         String @db.Text
  excerpt         String @db.Text
  seoTitle        String?
  metaDescription String?

  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@unique([contentItemId, language])
  @@map("content_translations")
}

enum ContentType {
  PAGE
  POST
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Category system
model Category {
  id           String                @id @default(cuid())
  slug         String                @unique
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  translations CategoryTranslation[]
  contentItems ContentItemCategory[]

  @@map("categories")
}

model CategoryTranslation {
  id          String @id @default(cuid())
  categoryId  String
  language    String
  name        String
  description String?

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
  @@map("category_translations")
}

model ContentItemCategory {
  contentItemId String
  categoryId    String

  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([contentItemId, categoryId])
  @@map("content_item_categories")
}

// Tag system
model Tag {
  id           String              @id @default(cuid())
  slug         String              @unique
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  translations TagTranslation[]
  contentItems ContentItemTag[]

  @@map("tags")
}

model TagTranslation {
  id       String @id @default(cuid())
  tagId    String
  language String
  name     String

  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, language])
  @@map("tag_translations")
}

model ContentItemTag {
  contentItemId String
  tagId         String

  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contentItemId, tagId])
  @@map("content_item_tags")
}

// Media management
model MediaFile {
  id           String    @id @default(cuid())
  filename     String    @unique
  originalName String
  url          String
  altText      String?
  caption      String?
  mimeType     String
  fileSize     Int?
  category     String    @default("images")
  uploaderId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  uploader User? @relation("MediaFileUploader", fields: [uploaderId], references: [id])

  @@map("media_files")
}

// Services management
model Service {
  id           String               @id @default(cuid())
  slug         String               @unique
  icon         String?
  featuredImg  String?
  colorTheme   String?              @default("navy")
  order        Int                  @default(0)
  active       Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  translations ServiceTranslation[]

  @@map("services")
}

model ServiceTranslation {
  id          String @id @default(cuid())
  serviceId   String
  language    String
  title       String
  description String @db.Text
  buttonText  String @default("Learn More")

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([serviceId, language])
  @@map("service_translations")
}

// Membership management
model Member {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  firstNameKhmer    String?
  lastNameKhmer     String?
  email             String            @unique
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  membershipType    MembershipType    @default(REGULAR)
  residenceStatus   ResidenceStatus?
  joinedAt          DateTime          @default(now())
  active            Boolean           @default(true)
  profileImage      String?
  bio               String?           @db.Text
  skills            String[]
  interests         String[]
  emergencyContact  String?
  emergencyPhone    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("members")
}

enum MembershipType {
  REGULAR
  STUDENT
  FAMILY
  HONORARY
}

enum ResidenceStatus {
  CITIZEN
  PERMANENT_RESIDENT
  STUDENT
  WORK_PERMIT
  ASYLUM_SEEKER
  OTHER
}

// Membership requests
model MembershipRequest {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  firstNameKhmer    String?
  lastNameKhmer     String?
  email             String
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  residenceStatus   ResidenceStatus?
  motivation        String            @db.Text
  status            RequestStatus     @default(PENDING)
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewNotes       String?           @db.Text
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  reviewer User? @relation("MembershipRequestReviewer", fields: [reviewedBy], references: [id])

  @@map("membership_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}